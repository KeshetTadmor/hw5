import pathlib
from numpy.lib.function_base import average
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas._libs.missing import NA, NAType
from pandas.core.arrays.integer import UInt8Dtype
from pandas.core.frame import DataFrame
from typing import Union
from typing import Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        path = pathlib.Path(data_fname)
        if path.exists():
            self.data_fname = path
        else:
            raise ValueError('invalid path')

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        bins = np.arange(0, 110, 10)
        ages = self.data.age.values
        hist, bins = np.histogram(ages, bins=bins)
        self.data.age.hist(bins=np.arange(0, 110, 10))
        return (hist, bins)

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        indexes = []
        data = self.data
        for index, row in data.iterrows():
            adress = row.email
            if adress.find('@') == -1 or adress[0] == '@' or adress[-1] == '@' or adress.find('@.') != -1 or adress.find('.') == -1 or adress[0] == '.' or adress[-1] == '.':
                ...
            else:
                indexes.append(index)
        nd = data.loc[indexes]
        nd.index = range(0, len(indexes))
        return nd

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        data = self.data
        means = data.mean(axis=0)
        fillings = {'q1': means.q1, 'q2': means.q2,
                    'q3': means.q3, 'q4': means.q4, 'q5': means.q5}
        df = data.fillna(fillings)
        colums = ['q1', 'q2', 'q3', 'q4', 'q5']
        questions = self.data[colums]
        NANs = questions[questions.isnull().any(axis=1)]
        arr = np.array(NANs.index.values)
        return df, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        nd = self.data.copy()
        indexes = []
        data_questions = nd[['q1', 'q2', 'q3', 'q4', 'q5']]
        nd['score'] = data_questions.mean(
            axis=1, skipna=True).astype("uint8").astype("UInt8")

        for index, row in data_questions.iterrows():
            if (data_questions.loc[[index]].isna().sum().sum()) > maximal_nans_per_sub:
                indexes.append(index)

        for i in indexes:
            nd.at[i, 'score'] = pd.NA
        return nd

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
        """
        nans = self.data['age'].isna()
        a = []
        data = self.data
        del data['id']
        for v in range(0, len(nans)):
            if nans[v] == False:
                a.append(v)
        for subject in a:
            if data.loc[subject, 'age'] > 40:
                data.loc[subject, 'age'] = True
            else:
                data.loc[subject, 'age'] = False
        nd = data.groupby(['gender', 'age']).mean()

        return nd
